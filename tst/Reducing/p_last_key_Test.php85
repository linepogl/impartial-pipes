<?php

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use OutOfBoundsException;
use Tests\UnitTestCase;

use function ImpartialPipes\p_last_key;
use function Tests\p_assert_equals;
use function Tests\p_assert_throws;

/**
 * @internal
 */
final class p_last_key_Test extends UnitTestCase
{
    public function test_p_last_key_with_arrays(): void
    {
        static fn () => (
            []
            |> p_last_key()
        ) |> p_assert_throws(OutOfBoundsException::class);

        static fn () => (
            []
            |> p_last_key(static fn (int $x) => $x < 3)
        ) |> p_assert_throws(OutOfBoundsException::class);

        [1,2,3]
        |> p_last_key()
        |> p_assert_equals(2);

        [1,2,3]
        |> p_last_key(static fn (int $x) => $x < 3)
        |> p_assert_equals(1);

        static fn () => (
            [1,2,3]
            |> p_last_key(static fn (int $x) => $x > 3)
        ) |> p_assert_throws(OutOfBoundsException::class);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_key()
        |> p_assert_equals('aaa');

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_key(static fn (int $x, string $k) => strlen($k) < 3)
        |> p_assert_equals('aa');

        static fn () => (
            ['a' => 1, 'aa' => 2, 'aaa' => 3]
            |> p_last_key(static fn (int $x, string $k) => strlen($k) > 3)
        ) |> p_assert_throws(OutOfBoundsException::class);
    }

    public function test_p_last_key_with_iterables(): void
    {
        static fn () => (
            new ArrayIterator([])
            |> p_last_key()
        ) |> p_assert_throws(OutOfBoundsException::class);

        static fn () => (
            new ArrayIterator([])
            |> p_last_key(static fn (int $x) => $x < 3)
        ) |> p_assert_throws(OutOfBoundsException::class);

        new ArrayIterator([1,2,3])
        |> p_last_key()
        |> p_assert_equals(2);

        new ArrayIterator([1,2,3])
        |> p_last_key(static fn (int $x) => $x < 3)
        |> p_assert_equals(1);

        static fn () => (
            new ArrayIterator([1,2,3])
            |> p_last_key(static fn (int $x) => $x > 3)
        ) |> p_assert_throws(OutOfBoundsException::class);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_key()
        |> p_assert_equals('aaa');

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_key(static fn (int $x, string $k) => strlen($k) < 3)
        |> p_assert_equals('aa');

        static fn () => (
            new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
            |> p_last_key(static fn (int $x, string $k) => strlen($k) > 3)
        ) |> p_assert_throws(OutOfBoundsException::class);
    }
}
