<?php

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use Tests\UnitTestCase;

use function ImpartialPipes\p_last_or;
use function Tests\is;
use function Tests\p_assert_equals;

/**
 * @internal
 */
final class p_last_or_Test extends UnitTestCase
{
    public function test_p_last_or_with_arrays(): void
    {
        []
        |> p_last_or(null)
        |> p_assert_equals(null);

        []
        |> p_last_or(null, static fn (int $x) => $x < 3)
        |> p_assert_equals(null);

        [1,2,3]
        |> p_last_or(null)
        |> p_assert_equals(3);

        [1,2,3]
        |> p_last_or(null, static fn (int $x) => $x < 3)
        |> p_assert_equals(2);

        [1,2,3]
        |> p_last_or(null, static fn (int $x) => $x > 3)
        |> p_assert_equals(null);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_or(null)
        |> p_assert_equals(3);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_or(null, static fn (int $x, string $k) => strlen($k) < 3)
        |> p_assert_equals(2);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_or(null, static fn (int $x, string $k) => strlen($k) > 3)
        |> p_assert_equals(null);
    }

    public function test_p_last_or_with_iterables(): void
    {
        new ArrayIterator([])
        |> p_last_or(null)
        |> p_assert_equals(null);

        new ArrayIterator([])
        |> p_last_or(null, static fn (int $x) => $x < 3)
        |> p_assert_equals(null);

        new ArrayIterator([1,2,3])
        |> p_last_or(null)
        |> p_assert_equals(3);

        new ArrayIterator([1,2,3])
        |> p_last_or(null, static fn (int $x) => $x < 3)
        |> p_assert_equals(2);

        new ArrayIterator([1,2,3])
        |> p_last_or(null, static fn (int $x) => $x > 3)
        |> p_assert_equals(null);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_or(null)
        |> p_assert_equals(3);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_or(null, static fn (int $x, string $k) => strlen($k) < 3)
        |> p_assert_equals(2);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_or(null, static fn (int $x, string $k) => strlen($k) > 3)
        |> p_assert_equals(null);
    }
}
