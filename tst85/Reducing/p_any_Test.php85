<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use PHPUnit\Framework\TestCase;
use Tests\SimpleIterator;
use Tests\UniterableArrayIterator;

use function ImpartialPipes\p_any;
use function Tests\shouldBe;

/**
 * @internal
 */
final class p_any_Test extends TestCase
{
    public function test_p_any_with_arrays(): void
    {
        []
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        []
        |> p_any(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(false);

        [2, 3, 4]
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        [2, 4, 6]
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        ['aa' => 1, 'bb' => 2, 'cc' => 3]
        |> p_any(static fn (int $x, string $k) => $k[0] === 'b')
        |> shouldBe(true);

        ['aa' => 1, 'bb' => 2, 'cc' => 3]
        |> p_any(static fn (int $x, string $k) => $k[0] === 'd')
        |> shouldBe(false);
    }

    public function test_p_any_with_iterators(): void
    {
        new ArrayIterator([])
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        new ArrayIterator([])
        |> p_any(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(false);

        new ArrayIterator([2, 3, 4])
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        new ArrayIterator([2, 4, 6])
        |> p_any(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        new ArrayIterator(['aa' => 1, 'bb' => 2, 'cc' => 3])
        |> p_any(static fn (int $x, string $k) => $k[0] === 'b')
        |> shouldBe(true);

        new ArrayIterator(['aa' => 1, 'bb' => 2, 'cc' => 3])
        |> p_any(static fn (int $x, string $k) => $k[0] === 'd')
        |> shouldBe(false);
    }

    public function test_p_any_without_a_predicate(): void
    {
        []
        |> p_any()
        |> shouldBe(false);

        [1, 2]
        |> p_any()
        |> shouldBe(true);

        new UniterableArrayIterator([])
        |> p_any()
        |> shouldBe(false);

        new UniterableArrayIterator([1, 2])
        |> p_any()
        |> shouldBe(true);

        new SimpleIterator([])
        |> p_any()
        |> shouldBe(false);

        new SimpleIterator([1, 2])
        |> p_any()
        |> shouldBe(true);
    }
}
