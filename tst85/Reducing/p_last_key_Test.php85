<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use OutOfBoundsException;
use PHPUnit\Framework\TestCase;

use function ImpartialPipes\p_last_key;
use function Tests\shouldBe;
use function Tests\shouldThrow;

/**
 * @internal
 */
final class p_last_key_Test extends TestCase
{
    public function test_p_last_key_with_arrays(): void
    {
        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            []
            |> p_last_key()
        );

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            []
            |> p_last_key(static fn (int $x) => $x < 3)
        );

        [1,2,3]
        |> p_last_key()
        |> shouldBe(2);

        [1,2,3]
        |> p_last_key(static fn (int $x) => $x < 3)
        |> shouldBe(1);

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            [1,2,3]
            |> p_last_key(static fn (int $x) => $x > 3)
        );

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_key()
        |> shouldBe('aaa');

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_last_key(static fn (int $x, string $k) => strlen($k) < 3)
        |> shouldBe('aa');

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            ['a' => 1, 'aa' => 2, 'aaa' => 3]
            |> p_last_key(static fn (int $x, string $k) => strlen($k) > 3)
        );
    }

    public function test_p_last_key_with_iterables(): void
    {
        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            new ArrayIterator([])
            |> p_last_key()
        );

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            new ArrayIterator([])
            |> p_last_key(static fn (int $x) => $x < 3)
        );

        new ArrayIterator([1,2,3])
        |> p_last_key()
        |> shouldBe(2);

        new ArrayIterator([1,2,3])
        |> p_last_key(static fn (int $x) => $x < 3)
        |> shouldBe(1);

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            new ArrayIterator([1,2,3])
            |> p_last_key(static fn (int $x) => $x > 3)
        );

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_key()
        |> shouldBe('aaa');

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_last_key(static fn (int $x, string $k) => strlen($k) < 3)
        |> shouldBe('aa');

        shouldThrow(OutOfBoundsException::class)(
            static fn () =>
            new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
            |> p_last_key(static fn (int $x, string $k) => strlen($k) > 3)
        );
    }
}
