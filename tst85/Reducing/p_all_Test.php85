<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use PHPUnit\Framework\TestCase;

use function ImpartialPipes\p_all;
use function Should\shouldBe;

/**
 * @internal
 */
final class p_all_Test extends TestCase
{
    public function test_p_all_with_arrays(): void
    {
        []
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        []
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(true);

        [1, 3, 5]
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        [1, 2, 5]
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(true);

        ['a' => 1, 'b' => 2, 'c' => 3]
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(false);
    }

    public function test_p_all_with_iterators(): void
    {
        new ArrayIterator([])
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        new ArrayIterator([])
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(true);

        new ArrayIterator([1, 3, 5])
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(true);

        new ArrayIterator([1, 2, 5])
        |> p_all(static fn (int $x) => $x % 2 === 1)
        |> shouldBe(false);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(true);

        new ArrayIterator(['a' => 1, 'b' => 2, 'c' => 3])
        |> p_all(static fn (int $x, string $k) => $k[0] === 'a')
        |> shouldBe(false);
    }
}
