<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests\Reducing;

use ArrayIterator;
use PHPUnit\Framework\TestCase;

use function ImpartialPipes\p_first_key_or;
use function Should\shouldBe;

/**
 * @internal
 */
final class p_first_key_or_Test extends TestCase
{
    public function test_p_first_key_or_with_arrays(): void
    {
        []
        |> p_first_key_or(null)
        |> shouldBe(null);

        []
        |> p_first_key_or(null, static fn (int $x) => $x > 1)
        |> shouldBe(null);

        [1,2,3]
        |> p_first_key_or(null)
        |> shouldBe(0);

        [1,2,3]
        |> p_first_key_or(null, static fn (int $x) => $x > 1)
        |> shouldBe(1);

        [1,2,3]
        |> p_first_key_or(null, static fn (int $x) => $x > 3)
        |> shouldBe(null);

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_first_key_or(null)
        |> shouldBe('a');

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_first_key_or(null, static fn (int $x, string $k) => strlen($k) > 1)
        |> shouldBe('aa');

        ['a' => 1, 'aa' => 2, 'aaa' => 3]
        |> p_first_key_or(null, static fn (int $x, string $k) => strlen($k) > 3)
        |> shouldBe(null);
    }

    public function test_p_first_key_or_with_iterables(): void
    {
        new ArrayIterator([])
        |> p_first_key_or(null)
        |> shouldBe(null);

        new ArrayIterator([])
        |> p_first_key_or(null, static fn (int $x) => $x > 1)
        |> shouldBe(null);

        new ArrayIterator([1,2,3])
        |> p_first_key_or(null)
        |> shouldBe(0);

        new ArrayIterator([1,2,3])
        |> p_first_key_or(null, static fn (int $x) => $x > 1)
        |> shouldBe(1);

        new ArrayIterator([1,2,3])
        |> p_first_key_or(null, static fn (int $x) => $x > 3)
        |> shouldBe(null);

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_first_key_or(null)
        |> shouldBe('a');

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_first_key_or(null, static fn (int $x, string $k) => strlen($k) > 1)
        |> shouldBe('aa');

        new ArrayIterator(['a' => 1, 'aa' => 2, 'aaa' => 3])
        |> p_first_key_or(null, static fn (int $x, string $k) => strlen($k) > 3)
        |> shouldBe(null);
    }
}
