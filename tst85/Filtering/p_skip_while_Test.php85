<?php // This file is autogenerated

declare(strict_types=1);

namespace Tests\Filtering;

use Tests\UnitTestCase;

use function ImpartialPipes\p_skip_while;
use function Tests\p_assert_iterates_like;

/**
 * @internal
 */
final class p_skip_while_Test extends UnitTestCase
{
    public function test_p_skip_while(): void
    {
        []
        |> p_skip_while(fn (int $x) => $x % 2 === 1)
        |> p_assert_iterates_like([]);

        []
        |> p_skip_while(fn (int $x) => $x % 2 === 1, preserveKeys: true)
        |> p_assert_iterates_like([]);

        ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4]
        |> p_skip_while(fn (int $x) => $x % 2 === 1)
        |> p_assert_iterates_like([2, 3, 4]);

        ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4]
        |> p_skip_while(fn (int $x) => $x % 2 === 1, preserveKeys: true)
        |> p_assert_iterates_like(['b' => 2, 'c' => 3, 'd' => 4]);

        ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4]
        |> p_skip_while(fn (int $x, string $k) => $k === 'a')
        |> p_assert_iterates_like([2, 3, 4]);

        ['a' => 1, 'b' => 2, 'c' => 3, 'd' => 4]
        |> p_skip_while(fn (int $x, string $k) => $k === 'a', preserveKeys: true)
        |> p_assert_iterates_like(['b' => 2, 'c' => 3, 'd' => 4]);
    }
}
